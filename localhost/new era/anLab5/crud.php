<?php
$message = "";

$parser = isset($_GET['parser']) ? $_GET['parser'] : 'simple';

if (file_exists("airports.xml")) {
    $xml = simplexml_load_file("airports.xml");
} else {
    $xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã/>');
    $xml->asXML("airports.xml");
}

if (isset($_POST['edit'])) {
    $airportId   = $_POST['airport_id'];
    $elementPath = $_POST['element_path'];
    $newValue    = $_POST['new_value'];
    $pathParts = explode("::", $elementPath);
    foreach ($xml->–ê—ç—Ä–æ–ø–æ—Ä—Ç as $airport) {
        if ((string)$airport['id'] === $airportId) {
            $target = $airport;
            foreach ($pathParts as $part) {
                if (isset($target->{$part})) {
                    $target = $target->{$part};
                } else {
                    $message = "–≠–ª–µ–º–µ–Ω—Ç {$elementPath} –Ω–µ –Ω–∞–π–¥–µ–Ω.";
                    break 2;
                }
            }
            $target[0] = $newValue;
            $message = "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.";
            $xml->asXML("airports.xml");
            break;
        }
    }
}

if (isset($_GET['delete']) && $_GET['delete'] == '–†–µ–π—Å') {
    $airportId = $_GET['airport_id'];
    foreach ($xml->–ê—ç—Ä–æ–ø–æ—Ä—Ç as $airport) {
        if ((string)$airport['id'] === $airportId) {
            $domAirport = dom_import_simplexml($airport);
            while ($domAirport->hasChildNodes()) {
                $domAirport->removeChild($domAirport->firstChild);
            }
            $message = "–≠–ª–µ–º–µ–Ω—Ç '–†–µ–π—Å' –∏ –≤—Å–µ –ø–æ–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã.";
            $xml->asXML("airports.xml");
            break;
        }
    }
    $xml = simplexml_load_file("airports.xml");
}

if (isset($_POST['add_child_submit'])) {
    $airportId = $_POST['airport_id'];
    foreach ($xml->–ê—ç—Ä–æ–ø–æ—Ä—Ç as $airport) {
        if ((string)$airport['id'] === $airportId) {
            $airport->addChild("–ù–æ–º–µ—Ä", $_POST['–Ω–æ–º–µ—Ä']);

            $rey = $airport->addChild("–†–µ–π—Å");
            $rey->addChild("–°–µ—Ä–∏—è", $_POST['—Ä–µ–π—Å_—Å–µ—Ä–∏—è']);
            $rey->addChild("–ù–æ–º–µ—Ä", $_POST['—Ä–µ–π—Å_–Ω–æ–º–µ—Ä']);

            $plane = $airport->addChild("–°–∞–º–æ–ª—ë—Ç");
            $plane->addChild("–ö–æ–¥", $_POST['samolot_–∫–æ–¥']);
            $plane->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['samolot_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

            $avia = $airport->addChild("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
            $avia->addChild("–ö–æ–¥", $_POST['aviakompaniya_–∫–æ–¥']);
            $avia->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['aviakompaniya_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

            $pass = $airport->addChild("–ü–∞—Å—Å–∞–∂–∏—Ä");
            $pass->addChild("–ö–æ–¥", $_POST['passazhir_–∫–æ–¥']);
            $pass->addChild("–§–ò–û", $_POST['passazhir_—Ñ–∏–æ']);
            $pass->addChild("–ü–∞—Å–ø–æ—Ä—Ç", $_POST['passazhir_–ø–∞—Å–ø–æ—Ä—Ç']);

            $pass = $airport->addChild("–ú–µ—Å—Ç–æ");
            $pass->addChild("–ù–æ–º–µ—Ä", $_POST['mesto_–Ω–æ–º–µ—Ä']);
            $pass->addChild("–ö–ª–∞—Å—Å", $_POST['mesto_–∫–ª–∞—Å—Å']);

            $route = $airport->addChild("–ú–∞—Ä—à—Ä—É—Ç");
            $route->addChild("–ö–æ–¥", $_POST['marshrut_–∫–æ–¥']);

            $takeoff = $route->addChild("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
            $takeoff->addChild("–ö–æ–¥", $_POST['otpravlenie_–∫–æ–¥']);
            $takeoff->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['otpravlenie_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

            $arrival = $route->addChild("–ü—Ä–∏–±—ã—Ç–∏–µ");
            $arrival->addChild("–ö–æ–¥", $_POST['pribytie_–∫–æ–¥']);
            $arrival->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['pribytie_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

            $message = "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç —Å id $airportId.";
            $xml->asXML("airports.xml");
            break;
        }
    }
}

if (isset($_POST['add_airport_submit'])) {
    $maxId = 0;
    foreach ($xml->–ê—ç—Ä–æ–ø–æ—Ä—Ç as $airport) {
        $curId = (int)$airport['id'];
        if ($curId > $maxId) {
            $maxId = $curId;
        }
    }
    $newId = $maxId + 1;
    $newAirport = $xml->addChild("–ê—ç—Ä–æ–ø–æ—Ä—Ç");
    $newAirport->addAttribute("id", $newId);
    $newAirport->addChild("–ù–æ–º–µ—Ä", $_POST['–Ω–æ–º–µ—Ä']);

    $rey = $newAirport->addChild("–†–µ–π—Å");
    $rey->addChild("–°–µ—Ä–∏—è", $_POST['—Ä–µ–π—Å_—Å–µ—Ä–∏—è']);
    $rey->addChild("–ù–æ–º–µ—Ä", $_POST['—Ä–µ–π—Å_–Ω–æ–º–µ—Ä']);

    $plane = $newAirport->addChild("–°–∞–º–æ–ª—ë—Ç");
    $plane->addChild("–ö–æ–¥", $_POST['samolot_–∫–æ–¥']);
    $plane->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['samolot_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

    $avia = $newAirport->addChild("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
    $avia->addChild("–ö–æ–¥", $_POST['aviakompaniya_–∫–æ–¥']);
    $avia->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['aviakompaniya_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

    $pass = $newAirport->addChild("–ü–∞—Å—Å–∞–∂–∏—Ä");
    $pass->addChild("–ö–æ–¥", $_POST['passazhir_–∫–æ–¥']);
    $pass->addChild("–§–ò–û", $_POST['passazhir_—Ñ–∏–æ']);
    $pass->addChild("–ü–∞—Å–ø–æ—Ä—Ç", $_POST['passazhir_–ø–∞—Å–ø–æ—Ä—Ç']);

    $pass = $newAirport->addChild("–ú–µ—Å—Ç–æ");
    $pass->addChild("–ù–æ–º–µ—Ä", $_POST['mesto_–Ω–æ–º–µ—Ä']);
    $pass->addChild("–ö–ª–∞—Å—Å", $_POST['mesto_–∫–ª–∞—Å—Å']);

    $route = $newAirport->addChild("–ú–∞—Ä—à—Ä—É—Ç");
    $route->addChild("–ö–æ–¥", $_POST['marshrut_–∫–æ–¥']);

    $takeoff = $route->addChild("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
    $takeoff->addChild("–ö–æ–¥", $_POST['otpravlenie_–∫–æ–¥']);
    $takeoff->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['otpravlenie_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

    $arrival = $route->addChild("–ü—Ä–∏–±—ã—Ç–∏–µ");
    $arrival->addChild("–ö–æ–¥", $_POST['pribytie_–∫–æ–¥']);
    $arrival->addChild("–ù–∞–∑–≤–∞–Ω–∏–µ", $_POST['pribytie_–Ω–∞–∑–≤–∞–Ω–∏–µ']);

    $message = "–ù–æ–≤—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å id $newId.";
    $xml->asXML("airports.xml");
    $xml = simplexml_load_file("airports.xml");
}

function renderChildren($element, $airportId, $path = "") {
    ob_start();
    ?>
    <table>
      <tr>
        <th>–≠–ª–µ–º–µ–Ω—Ç</th>
        <th>–î–∞–Ω–Ω—ã–µ</th>
        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
      </tr>
      <?php foreach ($element->children() as $childName => $child): 
          $currentPath = $path ? $path . "::" . $childName : $childName;
      ?>
        <tr>
          <td><?= $childName ?></td>
          <td>
            <?php if ($child->count() > 0): ?>
              <?= renderChildren($child, $airportId, $currentPath) ?>
            <?php else: ?>
              <span class="data-value"><?= (string)$child ?></span>
            <?php endif; ?>
          </td>
          <td>
            <?php if ($child->count() == 0): ?>
              <button class="edit-btn" onclick="startEdit(this, '<?= $currentPath ?>', '<?= $airportId ?>')">‚úèÔ∏è</button>
            <?php endif; ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </table>
    <?php
    return ob_get_clean();
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>–ø–∞—Ä—Å–µ—Ä</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    table { border: 1px solid #ccc; border-collapse: collapse; margin-bottom: 15px; width: 100%; }
    th, td { border: 1px solid #ccc; padding: 5px 8px; text-align: left; }
    .container { display: flex; }
    .table-container { flex: 1; margin-right: 20px; }
    .edit-container { width: 300px; }
    .parser-buttons a { padding: 5px 10px; margin-right: 5px; background: #eef; text-decoration: none; }
    .parser-buttons a.active { background: #afa; }
    button { background: none; border: none; cursor: pointer; }
    input[type="text"] { padding: 3px; font-size: 14px; }
    .form-inline { display: inline; }
    a.add-btn { text-decoration: none; background: #ddf; padding: 3px 8px; border-radius: 3px; }
    form { margin-bottom: 10px; }
  </style>
  <script>
    function startEdit(btn, elementPath, airportId) {
      var td = btn.parentElement.previousElementSibling;
      var original = td.querySelector('.data-value').innerText;
      td.setAttribute('data-original', original);
      td.innerHTML = '<form method="post" class="form-inline">' +
        '<input type="hidden" name="airport_id" value="'+airportId+'">' +
        '<input type="hidden" name="element_path" value="'+elementPath+'">' +
        '<input type="text" name="new_value" value="'+original+'" style="width:80px;">' +
        '<button type="submit" name="edit" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">üíæ</button>' +
        '<button type="button" onclick="cancelEdit(this)" title="–û—Ç–º–µ–Ω–∞">‚ùå</button>' +
        '</form>';
    }
    function cancelEdit(btn) {
      var form = btn.closest('form');
      var td = form.parentElement;
      var original = td.getAttribute('data-original');
      td.innerHTML = '<span class="data-value">'+original+'</span>' +
                     ' <button class="edit-btn" onclick="startEdit(this, \''+ td.getAttribute("data-element") +'\', \''+ td.getAttribute("data-airport") +'\')">‚úèÔ∏è</button>';
      if (!td.getAttribute("data-element") || !td.getAttribute("data-airport")) {
          td.innerHTML = '<span class="data-value">'+original+'</span> <button class="edit-btn" onclick="startEdit(this, \''+td.dataset.elementPath+'\', \''+td.dataset.airportId+'\')">‚úèÔ∏è</button>';
      }
    }
    window.addEventListener("DOMContentLoaded", function() {
      var tds = document.querySelectorAll("td");
      tds.forEach(function(td) {
        if(td.querySelector('.data-value')){
        }
      });
    });
  </script>
</head>
<body>
  <?php if ($message): ?>
    <p><strong><?= $message ?></strong></p>
  <?php endif; ?>

  <div class="parser-buttons">
    <a href="crud.php?parser=simple" class="<?= ($parser=='simple') ? 'active' : '' ?>">Simple Parser</a>
    <a href="crud.php?parser=dom" class="<?= ($parser=='dom') ? 'active' : '' ?>">DOM Parser</a>
  </div>

  <div class="container">
    <div class="table-container">
      <?php if ($xml): ?>
        <?php foreach ($xml->–ê—ç—Ä–æ–ø–æ—Ä—Ç as $airport): ?>
          <h3>
            –ê—ç—Ä–æ–ø–æ—Ä—Ç (ID: <?= $airport['id'] ?>)
            <a class="add-btn" href="crud.php?add_child=1&airport_id=<?= $airport['id'] ?>&parser=<?= $parser ?>">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</a>
          </h3>
          <table>
            <tr>
              <th>–≠–ª–µ–º–µ–Ω—Ç</th>
              <th>–î–∞–Ω–Ω—ã–µ</th>
              <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
            </tr>
            <?php foreach ($airport->children() as $elementName => $element): ?>
              <tr>
                <td><?= $elementName ?></td>
                <td <?php if($element->count()==0): ?> data-element="<?= $elementName ?>" data-airport="<?= $airport['id'] ?>"<?php endif; ?>>
                  <?php if ($element->count() > 0): ?>
                    <?= renderChildren($element, $airport['id'], $elementName) ?>
                  <?php else: ?>
                    <span class="data-value"><?= (string)$element ?></span>
                  <?php endif; ?>
                </td>
                <td>
                  <?php if ($elementName == "–†–µ–π—Å"): ?>
                    <a href="crud.php?delete=–†–µ–π—Å&airport_id=<?= $airport['id'] ?>&parser=<?= $parser ?>" onclick="return confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –†–µ–π—Å –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç?');" title="–£–¥–∞–ª–∏—Ç—å">‚ùå</a>
                  <?php elseif($element->count()==0): ?>
                    <button class="edit-btn" onclick="startEdit(this, '<?= $elementName ?>', '<?= $airport['id'] ?>')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                  <?php endif; ?>
                </td>
              </tr>
            <?php endforeach; ?>
          </table>
        <?php endforeach; ?>
      <?php else: ?>
        <p>XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>
      <?php endif; ?>

      <div style="margin-top:20px;">
        <a class="add-btn" href="crud.php?add_airport=1&parser=<?= $parser ?>">–î–æ–±–∞–≤–∏—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç</a>
      </div>
    </div>

    <div class="edit-container">
      <?php if (isset($_GET['add_child'])): ?>
        <h3>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç (ID: <?= $_GET['airport_id'] ?>)</h3>
        <form action="crud.php?parser=<?= $parser ?>" method="post">
          <input type="hidden" name="airport_id" value="<?= $_GET['airport_id'] ?>">
          <p><strong>–ù–æ–º–µ—Ä:</strong><br>
             <input type="text" name="–Ω–æ–º–µ—Ä" required></p>
          <p><strong>–†–µ–π—Å</strong><br>
             –°–µ—Ä–∏—è: <input type="text" name="—Ä–µ–π—Å_—Å–µ—Ä–∏—è" required> 
             –ù–æ–º–µ—Ä: <input type="text" name="—Ä–µ–π—Å_–Ω–æ–º–µ—Ä" required></p>
          <p><strong>–°–∞–º–æ–ª—ë—Ç</strong><br>
             –ö–æ–¥: <input type="text" name="samolot_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="samolot_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è</strong><br>
             –ö–æ–¥: <input type="text" name="aviakompaniya_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="aviakompaniya_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ü–∞—Å—Å–∞–∂–∏—Ä</strong><br>
             –ö–æ–¥: <input type="text" name="passazhir_–∫–æ–¥" required> 
             –§–ò–û: <input type="text" name="passazhir_—Ñ–∏–æ" required>
             –ü–∞—Å–ø–æ—Ä—Ç: <input type="text" name="passazhir_–ø–∞—Å–ø–æ—Ä—Ç" required></p>
          <p><strong>–ú–µ—Å—Ç–æ</strong><br>
             –ù–æ–º–µ—Ä: <input type="text" name="mesto_–Ω–æ–º–µ—Ä" required> 
             –ö–ª–∞—Å—Å: <input type="text" name="mesto_–∫–ª–∞—Å—Å" required></p>
          <p><strong>–ú–∞—Ä—à—Ä—É—Ç</strong><br>
             –ö–æ–¥: <input type="text" name="marshrut_–∫–æ–¥" required></p>
          <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</strong><br>
             –ö–æ–¥: <input type="text" name="otpravlenie_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="otpravlenie_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ü—Ä–∏–±—ã—Ç–∏–µ</strong><br>
             –ö–æ–¥: <input type="text" name="pribytie_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="pribytie_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><input type="submit" name="add_child_submit" value="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"></p>
        </form>
      <?php elseif (isset($_GET['add_airport'])): ?>
        <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç</h3>
        <form action="crud.php?parser=<?= $parser ?>" method="post">
          <p><strong>–ù–æ–º–µ—Ä:</strong><br>
             <input type="text" name="–Ω–æ–º–µ—Ä" required></p>
          <p><strong>–†–µ–π—Å</strong><br>
             –°–µ—Ä–∏—è: <input type="text" name="—Ä–µ–π—Å_—Å–µ—Ä–∏—è" required> 
             –ù–æ–º–µ—Ä: <input type="text" name="—Ä–µ–π—Å_–Ω–æ–º–µ—Ä" required></p>
          <p><strong>–°–∞–º–æ–ª—ë—Ç</strong><br>
             –ö–æ–¥: <input type="text" name="samolot_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="samolot_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è</strong><br>
             –ö–æ–¥: <input type="text" name="aviakompaniya_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="aviakompaniya_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ü–∞—Å—Å–∞–∂–∏—Ä</strong><br>
             –ö–æ–¥: <input type="text" name="passazhir_–∫–æ–¥" required> 
             –§–ò–û: <input type="text" name="passazhir_—Ñ–∏–æ" required>
             –ü–∞—Å–ø–æ—Ä—Ç: <input type="text" name="passazhir_–ø–∞—Å–ø–æ—Ä—Ç" required></p>
          <p><strong>–ú–µ—Å—Ç–æ</strong><br>
             –ù–æ–º–µ—Ä: <input type="text" name="mesto_–Ω–æ–º–µ—Ä" required> 
             –ö–ª–∞—Å—Å: <input type="text" name="mesto_–∫–ª–∞—Å—Å" required></p>
          <p><strong>–ú–∞—Ä—à—Ä—É—Ç</strong><br>
             –ö–æ–¥: <input type="text" name="marshrut_–∫–æ–¥" required></p>
          <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</strong><br>
             –ö–æ–¥: <input type="text" name="otpravlenie_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="otpravlenie_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><strong>–ü—Ä–∏–±—ã—Ç–∏–µ</strong><br>
             –ö–æ–¥: <input type="text" name="pribytie_–∫–æ–¥" required> 
             –ù–∞–∑–≤–∞–Ω–∏–µ: <input type="text" name="pribytie_–Ω–∞–∑–≤–∞–Ω–∏–µ" required></p>
          <p><input type="submit" name="add_airport_submit" value="–î–æ–±–∞–≤–∏—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç"></p>
        </form>
      <?php endif; ?>
    </div>
  </div>
</body>
</html>
